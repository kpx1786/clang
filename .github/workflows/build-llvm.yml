name: Build Latest Clang for Termux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r27c
        add-to-path: false

    - name: Cache build dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
          ~/.termux-build
          termux-packages/debs
        key: ${{ runner.os }}-build-${{ hashFiles('**/build.sh') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install Rust and Cargo
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Build Clang
      env:
        NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        TERMUX_MAKE_PROCESSES: 2
        TERMUX_PKG_BUILD_IN_SRC: true
        TERMUX_DISABLE_SWIFT: true
      run: |
        set -ex
        
        # 系统依赖
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          curl \
          wget \
          pkg-config \
          python3 \
          python3-pip \
          ninja-build \
          cmake \
          ccache \
          libncurses5-dev \
          libncursesw5-dev \
          libxml2-dev \
          libffi-dev \
          libedit-dev \
          swig \
          python3-dev \
          npm \
          gperf \
          ruby \
          help2man \
          texinfo \
          libtool \
          autoconf \
          automake \
          bison \
          flex \
          g++-multilib \
          gettext \
          libwxgtk3.0-gtk3-dev
        
        # 安装 tree-sitter
        cargo install tree-sitter-cli
        
        # 创建必要的目录
        sudo mkdir -p /data/data/com.termux/files/usr/{include,lib,bin}
        sudo chmod -R 777 /data
        
        # 设置构建环境
        mkdir -p $HOME/.termux-build/{_cache,_build,android-tools}
        chmod -R 777 $HOME/.termux-build
        
        # 处理 libc++_shared.so
        NDK_SYSROOT="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        mkdir -p "${NDK_SYSROOT}/usr/lib/aarch64-linux-android/"
        
        # 从多个可能的位置查找并复制 libc++_shared.so
        POSSIBLE_PATHS=(
          "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/lib64"
          "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/lib"
          "${NDK}/toolchains/llvm/prebuilt/linux-x86_64/runtimes/aarch64"
          "${NDK}/sources/cxx-stl/llvm-libc++/libs/arm64-v8a"
        )
        
        for path in "${POSSIBLE_PATHS[@]}"; do
          if [ -f "${path}/libc++_shared.so" ]; then
            echo "Found libc++_shared.so in ${path}"
            cp "${path}/libc++_shared.so" "${NDK_SYSROOT}/usr/lib/aarch64-linux-android/"
            break
          fi
        done
        
        # 如果在 NDK 中找不到，尝试从 termux-packages 仓库下载
        if [ ! -f "${NDK_SYSROOT}/usr/lib/aarch64-linux-android/libc++_shared.so" ]; then
          echo "Attempting to download libc++_shared.so from known good source"
          curl -L -o "${NDK_SYSROOT}/usr/lib/aarch64-linux-android/libc++_shared.so" \
            "https://github.com/termux/termux-packages/raw/master/ndk-patches/libc++_shared.so"
        fi
        
        # 克隆并配置 termux-packages
        git clone --depth=1 https://github.com/termux/termux-packages.git
        cd termux-packages
        
        # 配置 termux.properties
        cat > termux.properties << EOF
        TERMUX_APP_PACKAGE=com.termux
        TERMUX_PREFIX=/data/data/com.termux/files/usr
        TERMUX_ANDROID_HOME=${NDK}
        TERMUX_NDK_VERSION=27
        TERMUX_MAKE_PROCESSES=2
        TERMUX_PKG_BUILD_IN_SRC=true
        EOF
        
        # 运行设置脚本
        ./scripts/setup-ubuntu.sh || true
        
        # 创建 LLVM 包目录和构建脚本
        mkdir -p packages/llvm-19
        cat > packages/llvm-19/build.sh << 'EOF'
        TERMUX_PKG_HOMEPAGE=https://clang.llvm.org/
        TERMUX_PKG_DESCRIPTION="LLVM 19 toolchain for Termux"
        TERMUX_PKG_LICENSE="Apache-2.0"
        TERMUX_PKG_MAINTAINER="@termux"
        _PKG_MAJOR_VERSION=19
        TERMUX_PKG_VERSION=${_PKG_MAJOR_VERSION}.1.4
        TERMUX_PKG_REVISION=1
        TERMUX_PKG_SRCURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${TERMUX_PKG_VERSION}/llvm-project-${TERMUX_PKG_VERSION}.src.tar.xz
        TERMUX_PKG_SHA256=3aa2d2d2c7553164ad5c6f3b932b31816e422635e18620c9349a7da95b98d811
        TERMUX_PKG_DEPENDS="libc++, ncurses, zlib"
        TERMUX_PKG_BUILD_DEPENDS="binutils-libs, libffi-static, zlib-static"
        TERMUX_PKG_PROVIDES="clang-${_PKG_MAJOR_VERSION}, llvm-${_PKG_MAJOR_VERSION}"
        TERMUX_PKG_CONFLICTS="clang-${_PKG_MAJOR_VERSION}, llvm-${_PKG_MAJOR_VERSION}"
        TERMUX_PKG_REPLACES="clang-${_PKG_MAJOR_VERSION}, llvm-${_PKG_MAJOR_VERSION}"
        TERMUX_PKG_GROUPS="base-devel"

        termux_step_pre_configure() {
          # 确保 libc++_shared.so 存在
          if [ ! -f "${TERMUX_PREFIX}/lib/libc++_shared.so" ]; then
            mkdir -p "${TERMUX_PREFIX}/lib/"
            cp "${TERMUX_ANDROID_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/libc++_shared.so" "${TERMUX_PREFIX}/lib/"
          fi
          
          TERMUX_LLVM_BUILD_CONFIGURATION=Release
          
          LLVM_DEFAULT_TARGET_TRIPLE=$TERMUX_HOST_PLATFORM
          LLVM_TARGET_ARCH=$TERMUX_ARCH
          
          TERMUX_PKG_EXTRA_CONFIGURE_ARGS+="
            -DLLVM_TARGET_ARCH=$LLVM_TARGET_ARCH
            -DLLVM_TARGETS_TO_BUILD=ARM;AArch64;X86;WebAssembly
            -DLLVM_HOST_TRIPLE=$LLVM_DEFAULT_TARGET_TRIPLE
            -DLLVM_BUILD_LLVM_DYLIB=ON
            -DLLVM_LINK_LLVM_DYLIB=ON
            -DCLANG_DEFAULT_LINKER=lld
            -DCLANG_DEFAULT_CXX_STDLIB=libc++
            -DLLVM_ENABLE_PROJECTS=clang;lld;polly
            -DLLVM_ENABLE_RUNTIMES=compiler-rt;libcxx;libcxxabi;libunwind
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON
            -DLLVM_ENABLE_ASSERTIONS=OFF
            -DLLVM_ENABLE_FFI=ON
            -DLLVM_ENABLE_TERMINFO=ON
            -DLLVM_ENABLE_THREADS=ON
            -DLLVM_PARALLEL_LINK_JOBS=1
            -DLLVM_CCACHE_BUILD=ON
            -DLLVM_ENABLE_PLUGINS=OFF
            -DLLVM_ENABLE_BACKTRACES=OFF
            -DLLVM_INCLUDE_EXAMPLES=OFF
            -DLLVM_INCLUDE_TESTS=OFF
            -DLLVM_ENABLE_OCAMLDOC=OFF
            -DLLVM_ENABLE_BINDINGS=OFF
            -DLLVM_ENABLE_LIBEDIT=OFF
            -DLLVM_ENABLE_LIBXML2=OFF
            -DLLVM_ENABLE_SPHINX=OFF
            -DLLVM_ENABLE_DOXYGEN=OFF
            -DLLVM_ENABLE_LIBPFM=OFF
            -DLLVM_ENABLE_MODULES=OFF
            -DLLVM_ENABLE_Z3_SOLVER=OFF
          "
        }
        EOF
        
        # 设置执行权限
        chmod +x packages/llvm-19/build.sh
        
        # 构建包
        TERMUX_DISABLE_SWIFT=true ./build-package.sh -a aarch64 -f llvm-19
        
        # 检查构建结果
        if [ ! -f "debs/llvm-19"*.deb ]; then
          echo "Build failed: No package was created"
          exit 1
        fi

    - name: Package artifacts
      if: success()
      run: |
        mkdir -p artifacts
        cp termux-packages/debs/llvm-19*.deb artifacts/
        
    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: llvm-19-clang-termux-aarch64
        path: artifacts/*.deb
        retention-days: 5

    - name: Cleanup
      if: always()
      run: |
        sudo rm -rf /data/data/com.termux || true
