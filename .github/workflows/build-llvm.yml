name: Build Latest Clang for Termux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r27c
        add-to-path: false

    - name: Cache build dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
          ~/.termux-build
          termux-packages/debs
        key: ${{ runner.os }}-build-${{ hashFiles('**/build.sh') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install Rust and Cargo
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Build Clang
      env:
        NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        TERMUX_MAKE_PROCESSES: 2
        TERMUX_PKG_BUILD_IN_SRC: true
      run: |
        set -ex  # 启用错误检查和命令回显
        
        echo "Setting up system dependencies..."
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          curl \
          wget \
          pkg-config \
          python3 \
          python3-pip \
          ninja-build \
          cmake \
          ccache \
          libncurses5-dev \
          libncursesw5-dev \
          libxml2-dev \
          libffi-dev \
          libedit-dev \
          swig \
          python3-dev \
          npm \
          gperf \
          ruby \
          help2man \
          texinfo \
          libtool \
          autoconf \
          automake \
          bison \
          flex \
          g++-multilib \
          gettext

        echo "Installing tree-sitter-cli..."
        sudo npm install -g tree-sitter-cli
        
        echo "Setting up directory structure..."
        sudo mkdir -p /data
        sudo mkdir -p /data/data
        sudo mkdir -p /data/data/com.termux
        sudo mkdir -p /data/data/com.termux/files
        sudo mkdir -p /data/data/com.termux/files/usr
        sudo mkdir -p /data/data/com.termux/files/usr/include
        sudo mkdir -p /data/data/com.termux/files/usr/lib
        sudo mkdir -p /data/data/com.termux/files/usr/bin
        sudo chmod -R 777 /data
        
        echo "Setting up Termux build environment..."
        mkdir -p $HOME/.termux-build/_cache
        mkdir -p $HOME/.termux-build/_build
        mkdir -p $HOME/.termux-build/android-tools
        chmod -R 777 $HOME/.termux-build
        
        echo "Cloning termux-packages..."
        git clone --depth=1 https://github.com/termux/termux-packages.git
        cd termux-packages
        
        echo "Configuring termux.properties..."
        cat > termux.properties << EOF
        TERMUX_APP_PACKAGE=com.termux
        TERMUX_PREFIX=/data/data/com.termux/files/usr
        TERMUX_ANDROID_HOME=${NDK}
        TERMUX_NDK_VERSION=27
        TERMUX_MAKE_PROCESSES=2
        TERMUX_PKG_BUILD_IN_SRC=true
        EOF
        
        echo "Running setup script..."
        ./scripts/setup-ubuntu.sh || true
        
        echo "Creating LLVM package directory..."
        mkdir -p packages/llvm-18
        
        echo "Creating build.sh..."
        cat > packages/llvm-18/build.sh << 'EOF'
        TERMUX_PKG_HOMEPAGE=https://clang.llvm.org/
        TERMUX_PKG_DESCRIPTION="LLVM 18 toolchain for Termux"
        TERMUX_PKG_LICENSE="Apache-2.0"
        TERMUX_PKG_MAINTAINER="@termux"
        _PKG_MAJOR_VERSION=18
        TERMUX_PKG_VERSION=${_PKG_MAJOR_VERSION}.1.1
        TERMUX_PKG_REVISION=1
        TERMUX_PKG_SRCURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-${TERMUX_PKG_VERSION}/llvm-project-${TERMUX_PKG_VERSION}.src.tar.xz
        TERMUX_PKG_SHA256=c56be5e9c5f3d3c750d5718332cae127403df852c3685f0ccd765531455e5e04
        TERMUX_PKG_DEPENDS="libc++, ncurses, zlib"
        TERMUX_PKG_BUILD_DEPENDS="binutils-libs, libffi-static, zlib-static"
        TERMUX_PKG_PROVIDES="clang-${_PKG_MAJOR_VERSION}, llvm-${_PKG_MAJOR_VERSION}"
        TERMUX_PKG_CONFLICTS="clang-${_PKG_MAJOR_VERSION}, llvm-${_PKG_MAJOR_VERSION}"
        TERMUX_PKG_REPLACES="clang-${_PKG_MAJOR_VERSION}, llvm-${_PKG_MAJOR_VERSION}"
        TERMUX_PKG_GROUPS="base-devel"

        termux_step_pre_configure() {
          # Build configuration:
          TERMUX_LLVM_BUILD_CONFIGURATION=Release
          
          LLVM_DEFAULT_TARGET_TRIPLE=$TERMUX_HOST_PLATFORM
          LLVM_TARGET_ARCH=$TERMUX_ARCH
          
          # Add flags for LLVM build:
          TERMUX_PKG_EXTRA_CONFIGURE_ARGS+="
            -DLLVM_TARGET_ARCH=$LLVM_TARGET_ARCH
            -DLLVM_TARGETS_TO_BUILD=ARM;AArch64;X86
            -DLLVM_HOST_TRIPLE=$LLVM_DEFAULT_TARGET_TRIPLE
            -DLLVM_BUILD_LLVM_DYLIB=ON
            -DLLVM_LINK_LLVM_DYLIB=ON
            -DCLANG_DEFAULT_LINKER=lld
            -DCLANG_DEFAULT_CXX_STDLIB=libc++
            -DLLVM_ENABLE_PROJECTS=clang;lld;polly
            -DLLVM_ENABLE_RUNTIMES=libcxx;libcxxabi;libunwind
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON
            -DLLVM_ENABLE_ASSERTIONS=OFF
            -DLLVM_ENABLE_FFI=ON
            -DLLVM_ENABLE_TERMINFO=ON
            -DLLVM_ENABLE_THREADS=ON
            -DLLVM_PARALLEL_LINK_JOBS=1
            -DLLVM_CCACHE_BUILD=ON
            -DLLVM_ENABLE_PLUGINS=OFF
            -DLLVM_ENABLE_BACKTRACES=OFF
            -DLLVM_INCLUDE_EXAMPLES=OFF
            -DLLVM_INCLUDE_TESTS=OFF
            -DLLVM_ENABLE_OCAMLDOC=OFF
            -DLLVM_ENABLE_BINDINGS=OFF
            -DLLVM_ENABLE_LIBEDIT=OFF
            -DLLVM_ENABLE_LIBXML2=OFF
            -DLLVM_ENABLE_SPHINX=OFF
            -DLLVM_ENABLE_DOXYGEN=OFF
            -DLLVM_ENABLE_LIBPFM=OFF
            -DLLVM_ENABLE_MODULES=OFF
            -DLLVM_ENABLE_Z3_SOLVER=OFF
          "
        }
        EOF
        
        echo "Setting execute permissions..."
        chmod +x packages/llvm-18/build.sh
        
        echo "Building package..."
        ./build-package.sh -a arm64 -f llvm-18
        
        echo "Checking build results..."
        if [ ! -f "debs/llvm-18"*.deb ]; then
          echo "Build failed: No package was created"
          exit 1
        fi

    - name: Package artifacts
      if: success()
      run: |
        mkdir -p artifacts
        cp termux-packages/debs/llvm-18*.deb artifacts/
        
    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: llvm-18-clang-termux-arm64
        path: artifacts/*.deb
        retention-days: 5

    - name: Cleanup
      if: always()
      run: |
        sudo rm -rf /data/data/com.termux || true
